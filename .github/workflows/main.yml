name: Main FOODGRAM Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.txt
          pip install flake8
      - name: Run Backend Tests
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

# –Ω–∞–≥—É–≥–ª–∏–ª –ø–æ–≤–µ—Ä—ä—Ö–Ω–æ—Å—Ç–Ω–æ, –Ω–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
#  frontend_tests:
#    name: Run Frontend Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#      - name: Install Dependencies
#        run: |
#          cd frontend/
#          npm ci
#      - name: Run Frontend Tests
#        run: |
#          cd frontend/
#          npm run test

  build_backend_and_push_to_docker_hub:
    name: Build and Push Backend to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Check Out the Repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest


  build_frontend_and_push_to_docker_hub:
    name: Build and Push Frontend to DockerHub
    runs-on: ubuntu-latest
    # –£–¥–∞–ª–µ–Ω –±–ª–æ–∫ needs, –∑–∞–º–µ–Ω–∏–≤ –Ω–∞ if
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Check Out the Repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest


  build_gateway_and_push_to_docker_hub:
    name: Build and Push Gateway to DockerHub
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Check Out the Repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest


  final_deploy:
    name: Final Deploy
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Check Out the Repo
        uses: actions/checkout@v3
      - name: Copy docker-compose.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Execute Remote Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/foodgram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: final_deploy
    steps:
      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! 
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${{ github.actor }}
            –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${{ github.event.head_commit.message }}
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/${{ github.repository }}
